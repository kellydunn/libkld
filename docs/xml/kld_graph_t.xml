<?xml version='1.0' encoding='utf-8'?>
<typedef id="kld_graph_t" name="kld_graph_t" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <type name="kld_graph" ref="kld_graph#kld_graph" />
  <function id="graph_insert_edge" name="graph_insert_edge">
    <brief> Inserts the passed int **data** as a <ref ref="kld_graph_edge_t#kld_graph_edge_t">kld_graph_edge_t</ref> into the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> **g**</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="graph_insert_edge::g" name="g">
      <doc>the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> in which to insert the **data**</doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </argument>
    <argument id="graph_insert_edge::n1" name="n1">
      <doc>the source <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to insert the edge</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
    <argument id="graph_insert_edge::n2" name="n2">
      <doc>the destination <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to insert the edge</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
    <argument id="graph_insert_edge::data" name="data">
      <doc>the data to be stored at the new <ref ref="kld_graph_edge_t#kld_graph_edge_t">kld_graph_edge_t</ref></doc>
      <type builtin="yes" name="void" qualifier="*" />
    </argument>
  </function>
  <function id="graph_is_empty" name="graph_is_empty">
    <brief> Returns whether or not a graph is empty</brief>
    <return>
      <doc>true if the graph is empty and false if otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="graph_is_empty::g" name="g">
      <doc>the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> in which to test for emptiness</doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </argument>
  </function>
  <function id="graph_node_is_adjacent" name="graph_node_is_adjacent">
    <brief> Returns whether or not the passed in <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n1** is adjacent to the passed in <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n2**</brief>
    <return>
      <doc>true if **n1** is adjacent to **n2** and false if otherwise</doc>
      <type builtin="yes" name="bool" />
    </return>
    <argument id="graph_node_is_adjacent::g" name="g">
      <doc>the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> in which to test for adjacency</doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </argument>
    <argument id="graph_node_is_adjacent::n1" name="n1">
      <doc>the <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to test is adjacent to <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n2**</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
    <argument id="graph_node_is_adjacent::n2" name="n2">
      <doc>the <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to test is adjacent to <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n1**</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
  </function>
  <function id="graph_node_neighbors" name="graph_node_neighbors">
    <brief> Returns a <ref ref="kld_vector_t#kld_vector_t">kld_vector_t</ref> of all the current neighbors of <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n** inside of <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> **g**.</brief>
    <return>
      <doc>a <ref ref="kld_vector_t#kld_vector_t">kld_vector_t</ref> of all the current neighbors of <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> **n** inside of <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> **g**.</doc>
      <type name="kld_vector_t" qualifier="*" ref="kld_vector_t#kld_vector_t" />
    </return>
    <argument id="graph_node_neighbors::g" name="g">
      <doc>the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> in which to retrieve neighbors.</doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </argument>
    <argument id="graph_node_neighbors::n" name="n">
      <doc>the <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to retrieve neighbors.</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
  </function>
  <function id="graph_remove_edge" name="graph_remove_edge">
    <brief> Removes a <ref ref="kld_graph_edge_t#kld_graph_edge_t">kld_graph_edge_t</ref> from the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> **g** that connects **n1** to **n2**.</brief>
    <return>
      <type builtin="yes" name="void" />
    </return>
    <argument id="graph_remove_edge::g" name="g">
      <doc>the <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref> in which to remove the <ref ref="kld_graph_edge_t#kld_graph_edge_t">kld_graph_edge_t</ref></doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </argument>
    <argument id="graph_remove_edge::n1" name="n1">
      <doc>the source <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to remove the edge</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
    <argument id="graph_remove_edge::n2" name="n2">
      <doc>the destination <ref ref="kld_graph_node_t#kld_graph_node_t">kld_graph_node_t</ref> in which to remove the edge</doc>
      <type name="kld_graph_node_t" qualifier="*" ref="kld_graph_node_t#kld_graph_node_t" />
    </argument>
  </function>
  <function id="new_graph" name="new_graph">
    <brief> Creates and returns a pointer to a new <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref>
    </brief>
    <return>
      <doc>a pointer to a new <ref ref="kld_graph_t#kld_graph_t">kld_graph_t</ref></doc>
      <type name="kld_graph_t" qualifier="*" ref="kld_graph_t#kld_graph_t" />
    </return>
  </function>
</typedef>