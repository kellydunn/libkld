<?xml version='1.0' encoding='utf-8'?>
<struct id="kld_list" name="kld_list" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <doc>
A Standard List implementation.

<ref ref="kld_list_t#kld_list_t">kld_list_t</ref> is implemented as a circular, doubly-linked list.
It's flexible in that it can serve as a stack or as a queue in addition to a linked list by calling
`list_append` then `list_pop` (for FILO operations), and `list_append` then `list_shift` (for FIFO operations) respectively.

###operation times

| shift / pop | prepend / append | search | reverse |
| ----------- | ---------------- | ------ | ------- |
| O(1)        | O(1)             | O(n)*  | O(n)    |

(* is worst-case scenario)

</doc>
  <field id="kld_list::size" name="size">
    <type builtin="yes" name="int" />
  </field>
  <field id="kld_list::head" name="head">
    <type name="kld_list_node_t" qualifier="*" ref="kld_list_node_t#kld_list_node_t" />
  </field>
  <field id="kld_list::tail" name="tail">
    <type name="kld_list_node_t" qualifier="*" ref="kld_list_node_t#kld_list_node_t" />
  </field>
</struct>